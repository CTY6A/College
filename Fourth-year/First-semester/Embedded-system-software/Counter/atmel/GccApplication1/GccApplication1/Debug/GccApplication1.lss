
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ba  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#define MS 50

int main(void)
{	
	DDRB = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
    PORTB = 0b00000000;
  84:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;
  86:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00000001;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	8b b9       	out	0x0b, r24	; 11
    {		
		if (!(PIND & 0b00000001))
		{
			for (uint8_t i = 0; i < 8; i++)
			{
				PORTB |= (1 << i);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	70 e0       	ldi	r23, 0x00	; 0
	DDRD = 0x00;
	PORTD = 0b00000001;
	
    while(1)
    {		
		if (!(PIND & 0b00000001))
  90:	48 99       	sbic	0x09, 0	; 9
  92:	3d c0       	rjmp	.+122    	; 0x10e <main+0x8e>
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (uint8_t i = 0; i < 8; i++)
			{
				PORTB |= (1 << i);
  98:	45 b1       	in	r20, 0x05	; 5
  9a:	cb 01       	movw	r24, r22
  9c:	02 2e       	mov	r0, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x24>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x20>
  a8:	94 2f       	mov	r25, r20
  aa:	98 2b       	or	r25, r24
  ac:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	4f e7       	ldi	r20, 0x7F	; 127
  b0:	58 e3       	ldi	r21, 0x38	; 56
  b2:	e1 e0       	ldi	r30, 0x01	; 1
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	e0 40       	sbci	r30, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3e>
  be:	00 00       	nop
				_delay_ms(MS);
				PORTB &= ~(1 << i);
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	80 95       	com	r24
  c4:	89 23       	and	r24, r25
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
	
    while(1)
    {		
		if (!(PIND & 0b00000001))
		{
			for (uint8_t i = 0; i < 8; i++)
  cc:	28 30       	cpi	r18, 0x08	; 8
  ce:	31 05       	cpc	r19, r1
  d0:	19 f7       	brne	.-58     	; 0x98 <main+0x18>
  d2:	26 e0       	ldi	r18, 0x06	; 6
  d4:	30 e0       	ldi	r19, 0x00	; 0
				PORTB &= ~(1 << i);
			}
			
			for (uint8_t i = 6; i > 0; i--)
			{
				PORTB |= (1 << i);
  d6:	45 b1       	in	r20, 0x05	; 5
  d8:	cb 01       	movw	r24, r22
  da:	02 2e       	mov	r0, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x62>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <main+0x5e>
  e6:	94 2f       	mov	r25, r20
  e8:	98 2b       	or	r25, r24
  ea:	95 b9       	out	0x05, r25	; 5
  ec:	4f e7       	ldi	r20, 0x7F	; 127
  ee:	58 e3       	ldi	r21, 0x38	; 56
  f0:	e1 e0       	ldi	r30, 0x01	; 1
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	50 40       	sbci	r21, 0x00	; 0
  f6:	e0 40       	sbci	r30, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x72>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7c>
  fc:	00 00       	nop
				_delay_ms(MS);
				PORTB &= ~(1 << i);
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	80 95       	com	r24
 102:	89 23       	and	r24, r25
 104:	85 b9       	out	0x05, r24	; 5
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
				PORTB |= (1 << i);
				_delay_ms(MS);
				PORTB &= ~(1 << i);
			}
			
			for (uint8_t i = 6; i > 0; i--)
 10a:	29 f7       	brne	.-54     	; 0xd6 <main+0x56>
 10c:	c1 cf       	rjmp	.-126    	; 0x90 <main+0x10>
				PORTB &= ~(1 << i);
			}
		}	
		else
		{
			PORTB = 0;
 10e:	15 b8       	out	0x05, r1	; 5
 110:	bf cf       	rjmp	.-130    	; 0x90 <main+0x10>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
