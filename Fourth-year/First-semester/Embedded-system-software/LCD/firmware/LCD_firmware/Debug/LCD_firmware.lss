
LCD_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000b4a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800138  00800138  00000c16  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000149f  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c7  00000000  00000000  00002223  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000797  00000000  00000000  00002aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000747  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c54  00000000  00000000  00003c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000485b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 35       	cpi	r26, 0x57	; 87
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 57 02 	call	0x4ae	; 0x4ae <main>
  9e:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z12SendHalfByteh>:
	while (!(TWCR & (1<<TWINT)));
}

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  a6:	40 9a       	sbi	0x08, 0	; 8
  a8:	91 e1       	ldi	r25, 0x11	; 17
  aa:	9a 95       	dec	r25
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z12SendHalfByteh+0x4>
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	9f 70       	andi	r25, 0x0F	; 15
  b2:	95 b9       	out	0x05, r25	; 5
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	82 95       	swap	r24
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	89 2b       	or	r24, r25
  bc:	85 b9       	out	0x05, r24	; 5
  be:	40 98       	cbi	0x08, 0	; 8
  c0:	81 e1       	ldi	r24, 0x11	; 17
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <_Z12SendHalfByteh+0x1c>
  c6:	08 95       	ret

000000c8 <_Z8SendBytehh>:
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
  cc:	61 11       	cpse	r22, r1
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <_Z8SendBytehh+0xc>
  d0:	41 98       	cbi	0x08, 1	; 8
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <_Z8SendBytehh+0xe>
  d4:	41 9a       	sbi	0x08, 1	; 8
  d6:	8c 2f       	mov	r24, r28
  d8:	82 95       	swap	r24
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12SendHalfByteh>
  e0:	8c 2f       	mov	r24, r28
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12SendHalfByteh>
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <_Z8SendCharh>:
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
  f0:	08 95       	ret

000000f2 <_Z7InitLcdv>:
  f2:	85 ea       	ldi	r24, 0xA5	; 165
  f4:	9e e0       	ldi	r25, 0x0E	; 14
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <_Z7InitLcdv+0x4>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_Z7InitLcdv+0xa>
  fc:	00 00       	nop
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12SendHalfByteh>
 104:	87 ee       	ldi	r24, 0xE7	; 231
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_Z7InitLcdv+0x16>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_Z7InitLcdv+0x1c>
 10e:	00 00       	nop
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12SendHalfByteh>
 116:	91 e2       	ldi	r25, 0x21	; 33
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <_Z7InitLcdv+0x26>
 11c:	00 00       	nop
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12SendHalfByteh>
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <_Z7InitLcdv+0x36>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <_Z7InitLcdv+0x3c>
 12e:	00 00       	nop
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12SendHalfByteh>
 136:	89 ef       	ldi	r24, 0xF9	; 249
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <_Z7InitLcdv+0x48>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_Z7InitLcdv+0x4e>
 140:	00 00       	nop
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
 14a:	89 ef       	ldi	r24, 0xF9	; 249
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <_Z7InitLcdv+0x5c>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_Z7InitLcdv+0x62>
 154:	00 00       	nop
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	8c e0       	ldi	r24, 0x0C	; 12
 15a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
 15e:	89 ef       	ldi	r24, 0xF9	; 249
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_Z7InitLcdv+0x70>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z7InitLcdv+0x76>
 168:	00 00       	nop
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
 172:	89 ef       	ldi	r24, 0xF9	; 249
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <_Z7InitLcdv+0x84>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z7InitLcdv+0x8a>
 17c:	00 00       	nop
 17e:	08 95       	ret

00000180 <_Z8ClearLcdv>:
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
 188:	87 e7       	ldi	r24, 0x77	; 119
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <_Z8ClearLcdv+0xc>
 190:	08 95       	ret

00000192 <_Z11OuputStringPc>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	88 81       	ld	r24, Y
 19a:	88 23       	and	r24, r24
 19c:	31 f0       	breq	.+12     	; 0x1aa <_Z11OuputStringPc+0x18>
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	0e 94 75 00 	call	0xea	; 0xea <_Z8SendCharh>
 1a4:	89 91       	ld	r24, Y+
 1a6:	81 11       	cpse	r24, r1
 1a8:	fb cf       	rjmp	.-10     	; 0x1a0 <_Z11OuputStringPc+0xe>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <_Z12ShiftDisplayv>:
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	8c e1       	ldi	r24, 0x1C	; 28
 1b4:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
 1b8:	82 e1       	ldi	r24, 0x12	; 18
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <_Z12ShiftDisplayv+0xa>
 1be:	08 95       	ret

000001c0 <_Z18RTC_ConvertFromDech>:
 1c0:	98 2f       	mov	r25, r24
 1c2:	96 95       	lsr	r25
 1c4:	96 95       	lsr	r25
 1c6:	96 95       	lsr	r25
 1c8:	9e 71       	andi	r25, 0x1E	; 30
 1ca:	29 2f       	mov	r18, r25
 1cc:	22 0f       	add	r18, r18
 1ce:	22 0f       	add	r18, r18
 1d0:	92 0f       	add	r25, r18
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	89 0f       	add	r24, r25
 1d6:	08 95       	ret

000001d8 <_Z18I2C_StartConditionv>:
 1d8:	84 ea       	ldi	r24, 0xA4	; 164
 1da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1de:	ec eb       	ldi	r30, 0xBC	; 188
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 23       	and	r24, r24
 1e6:	ec f7       	brge	.-6      	; 0x1e2 <_Z18I2C_StartConditionv+0xa>
 1e8:	08 95       	ret

000001ea <_Z12I2C_SendByteh>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;// write byte to data register
 1ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT)|(1<<TWEN);//enable data transfer
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));
 1f4:	ec eb       	ldi	r30, 0xBC	; 188
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	ec f7       	brge	.-6      	; 0x1f8 <_Z12I2C_SendByteh+0xe>
}
 1fe:	08 95       	ret

00000200 <_Z18I2C_SendByteByADDRhh>:

void I2C_SendByteByADDR(unsigned char c,unsigned char addr)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	c8 2f       	mov	r28, r24
 206:	d6 2f       	mov	r29, r22
	I2C_StartCondition();
 208:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Z18I2C_StartConditionv>
	I2C_SendByte(addr); // send device address + read|write bit
 20c:	8d 2f       	mov	r24, r29
 20e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z12I2C_SendByteh>
	I2C_SendByte(c);
 212:	8c 2f       	mov	r24, r28
 214:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z12I2C_SendByteh>
	while (!(TWCR & (1<<TWINT)));
}

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 218:	84 e9       	ldi	r24, 0x94	; 148
 21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
{
	I2C_StartCondition();
	I2C_SendByte(addr); // send device address + read|write bit
	I2C_SendByte(c);
	I2C_StopCondition();
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <_Z12I2C_ReadBytev>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 224:	84 ec       	ldi	r24, 0xC4	; 196
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));
 22a:	ec eb       	ldi	r30, 0xBC	; 188
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	88 23       	and	r24, r24
 232:	ec f7       	brge	.-6      	; 0x22e <_Z12I2C_ReadBytev+0xa>
	return TWDR;// read data register
 234:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 238:	08 95       	ret

0000023a <_Z16I2C_ReadLastBytev>:

unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
 23a:	84 e8       	ldi	r24, 0x84	; 132
 23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));
 240:	ec eb       	ldi	r30, 0xBC	; 188
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	88 23       	and	r24, r24
 248:	ec f7       	brge	.-6      	; 0x244 <_Z16I2C_ReadLastBytev+0xa>
	return TWDR;// read data register
 24a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 24e:	08 95       	ret

00000250 <_Z8DHT_readhP2th>:
	uint8_t temperature;
	uint8_t humidity;
} TH_t;

int DHT_read(uint8_t _PIN, TH_t* _DATA) 
{
 250:	df 92       	push	r13
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 d0       	rcall	.+0      	; 0x260 <_Z8DHT_readhP2th+0x10>
 260:	00 d0       	rcall	.+0      	; 0x262 <_Z8DHT_readhP2th+0x12>
 262:	1f 92       	push	r1
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	uint8_t DHT_RESPONSE[5] = {0, 0, 0, 0, 0};
 268:	fe 01       	movw	r30, r28
 26a:	31 96       	adiw	r30, 0x01	; 1
 26c:	95 e0       	ldi	r25, 0x05	; 5
 26e:	df 01       	movw	r26, r30
 270:	1d 92       	st	X+, r1
 272:	9a 95       	dec	r25
 274:	e9 f7       	brne	.-6      	; 0x270 <_Z8DHT_readhP2th+0x20>
		
	DHT_DDR |= (1 << _PIN);
 276:	9a b1       	in	r25, 0x0a	; 10
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <_Z8DHT_readhP2th+0x32>
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	8a 95       	dec	r24
 284:	e2 f7       	brpl	.-8      	; 0x27e <_Z8DHT_readhP2th+0x2e>
 286:	92 2b       	or	r25, r18
 288:	9a b9       	out	0x0a, r25	; 10
	DHT_PORT &= ~(1 << _PIN);
 28a:	9b b1       	in	r25, 0x0b	; 11
 28c:	82 2f       	mov	r24, r18
 28e:	80 95       	com	r24
 290:	98 23       	and	r25, r24
 292:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	e3 e9       	ldi	r30, 0x93	; 147
 296:	f1 e1       	ldi	r31, 0x11	; 17
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <_Z8DHT_readhP2th+0x48>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <_Z8DHT_readhP2th+0x4e>
 29e:	00 00       	nop
	_delay_ms(18);
	
	DHT_PORT |= (1 << _PIN);
 2a0:	9b b1       	in	r25, 0x0b	; 11
 2a2:	92 2b       	or	r25, r18
 2a4:	9b b9       	out	0x0b, r25	; 11
	DHT_DDR &= ~(1 << _PIN);
 2a6:	9a b1       	in	r25, 0x0a	; 10
 2a8:	89 23       	and	r24, r25
 2aa:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	f0 e5       	ldi	r31, 0x50	; 80
 2ae:	fa 95       	dec	r31
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <_Z8DHT_readhP2th+0x5e>
	_delay_us(240);
	
	uint8_t _bit, _byte;
	while (!(DHT_PIN & (1 << _PIN)));
 2b2:	89 b1       	in	r24, 0x09	; 9
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	82 23       	and	r24, r18
 2b8:	93 23       	and	r25, r19
 2ba:	89 2b       	or	r24, r25
 2bc:	d1 f3       	breq	.-12     	; 0x2b2 <_Z8DHT_readhP2th+0x62>
 2be:	de 01       	movw	r26, r28
 2c0:	11 96       	adiw	r26, 0x01	; 1
 2c2:	7e 01       	movw	r14, r28
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	e8 0e       	add	r14, r24
 2c8:	f1 1c       	adc	r15, r1
		DHT_RESPONSE[_byte] = 0;
		for (_bit = 0; _bit < 8; _bit++) {
			_delay_us(40);
			if (DHT_PIN & (1 << _PIN))
			{
				DHT_RESPONSE[_byte] |= 1 << (7 - _bit);
 2ca:	01 e0       	ldi	r16, 0x01	; 1
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	fd 01       	movw	r30, r26
	
	uint8_t _bit, _byte;
	while (!(DHT_PIN & (1 << _PIN)));
	
	for (_byte = 0; _byte < 5; _byte++) {
		DHT_RESPONSE[_byte] = 0;
 2d0:	1c 92       	st	X, r1
 2d2:	47 e0       	ldi	r20, 0x07	; 7
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	8d e0       	ldi	r24, 0x0D	; 13
 2d8:	8a 95       	dec	r24
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <_Z8DHT_readhP2th+0x88>
 2dc:	00 00       	nop
		for (_bit = 0; _bit < 8; _bit++) {
			_delay_us(40);
			if (DHT_PIN & (1 << _PIN))
 2de:	89 b1       	in	r24, 0x09	; 9
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	82 23       	and	r24, r18
 2e4:	93 23       	and	r25, r19
 2e6:	89 2b       	or	r24, r25
 2e8:	51 f0       	breq	.+20     	; 0x2fe <_Z8DHT_readhP2th+0xae>
			{
				DHT_RESPONSE[_byte] |= 1 << (7 - _bit);
 2ea:	d0 80       	ld	r13, Z
 2ec:	c8 01       	movw	r24, r16
 2ee:	04 2e       	mov	r0, r20
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <_Z8DHT_readhP2th+0xa6>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <_Z8DHT_readhP2th+0xa2>
 2fa:	8d 29       	or	r24, r13
 2fc:	80 83       	st	Z, r24
			}
			while(!(DHT_PIN & (1 << _PIN)));
 2fe:	89 b1       	in	r24, 0x09	; 9
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	82 23       	and	r24, r18
 304:	93 23       	and	r25, r19
 306:	89 2b       	or	r24, r25
 308:	d1 f3       	breq	.-12     	; 0x2fe <_Z8DHT_readhP2th+0xae>
 30a:	41 50       	subi	r20, 0x01	; 1
 30c:	51 09       	sbc	r21, r1
 30e:	18 f7       	brcc	.-58     	; 0x2d6 <_Z8DHT_readhP2th+0x86>
 310:	11 96       	adiw	r26, 0x01	; 1
	_delay_us(240);
	
	uint8_t _bit, _byte;
	while (!(DHT_PIN & (1 << _PIN)));
	
	for (_byte = 0; _byte < 5; _byte++) {
 312:	ea 16       	cp	r14, r26
 314:	fb 06       	cpc	r15, r27
 316:	d9 f6       	brne	.-74     	; 0x2ce <_Z8DHT_readhP2th+0x7e>
			}
			while(!(DHT_PIN & (1 << _PIN)));
		}
	}
	
	_DATA -> humidity = DHT_RESPONSE[0]; 
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	db 01       	movw	r26, r22
 31c:	11 96       	adiw	r26, 0x01	; 1
 31e:	8c 93       	st	X, r24
 320:	11 97       	sbiw	r26, 0x01	; 1
	_DATA -> temperature = DHT_RESPONSE[2];
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	8c 93       	st	X, r24
	
	return 1;
}
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	08 95       	ret

00000344 <_Z8ReadTimev>:
char timeStr[TIME_LENGTH + 1];
char thStr[TEMPERATURE_LENGTH + 1];

void ReadTime()
{
	I2C_SendByteByADDR(0, 0b11010000);
 344:	60 ed       	ldi	r22, 0xD0	; 208
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 00 01 	call	0x200	; 0x200 <_Z18I2C_SendByteByADDRhh>
	I2C_StartCondition();
 34c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Z18I2C_StartConditionv>
	I2C_SendByte(0b11010001);
 350:	81 ed       	ldi	r24, 0xD1	; 209
 352:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z12I2C_SendByteh>
	
	sec = I2C_ReadByte();
 356:	0e 94 12 01 	call	0x224	; 0x224 <_Z12I2C_ReadBytev>
 35a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sec>
	min = I2C_ReadByte();
 35e:	0e 94 12 01 	call	0x224	; 0x224 <_Z12I2C_ReadBytev>
 362:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <min>
	hour = I2C_ReadByte();
 366:	0e 94 12 01 	call	0x224	; 0x224 <_Z12I2C_ReadBytev>
 36a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <hour>
	day = I2C_ReadByte();
 36e:	0e 94 12 01 	call	0x224	; 0x224 <_Z12I2C_ReadBytev>
 372:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <day>
	date = I2C_ReadByte();
 376:	0e 94 12 01 	call	0x224	; 0x224 <_Z12I2C_ReadBytev>
 37a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <date>
	month = I2C_ReadByte();
 37e:	0e 94 12 01 	call	0x224	; 0x224 <_Z12I2C_ReadBytev>
 382:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <month>
	year = I2C_ReadLastByte();
 386:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z16I2C_ReadLastBytev>
 38a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <year>
	while (!(TWCR & (1<<TWINT)));
}

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 38e:	84 e9       	ldi	r24, 0x94	; 148
 390:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 394:	08 95       	ret

00000396 <_Z7SetTimev>:
	I2C_StopCondition();
}

void SetTime()
{
	sec = RTC_ConvertFromDec(sec);
 396:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sec>
 39a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z18RTC_ConvertFromDech>
 39e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sec>
	min = RTC_ConvertFromDec(min);
 3a2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <min>
 3a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z18RTC_ConvertFromDech>
 3aa:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <min>
	hour = RTC_ConvertFromDec(hour);
 3ae:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <hour>
 3b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z18RTC_ConvertFromDech>
 3b6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <hour>
	day = RTC_ConvertFromDec(day);
 3ba:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <day>
 3be:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z18RTC_ConvertFromDech>
 3c2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <day>
	year = RTC_ConvertFromDec(year);
 3c6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <year>
 3ca:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z18RTC_ConvertFromDech>
 3ce:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <year>
	month = RTC_ConvertFromDec(month);
 3d2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <month>
 3d6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z18RTC_ConvertFromDech>
 3da:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <month>
	date = RTC_ConvertFromDec(date);
 3de:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <date>
 3e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z18RTC_ConvertFromDech>
 3e6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <date>
 3ea:	08 95       	ret

000003ec <_Z19FillDateAndTimeStrsv>:
}

void FillDateAndTimeStrs()
{
	sprintf(timeStr, "%02d.%02d.%02d", hour, min, sec);
 3ec:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sec>
 3f0:	1f 92       	push	r1
 3f2:	8f 93       	push	r24
 3f4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <min>
 3f8:	1f 92       	push	r1
 3fa:	8f 93       	push	r24
 3fc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <hour>
 400:	1f 92       	push	r1
 402:	8f 93       	push	r24
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	9f 93       	push	r25
 40a:	8f 93       	push	r24
 40c:	8a e3       	ldi	r24, 0x3A	; 58
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	9f 93       	push	r25
 412:	8f 93       	push	r24
 414:	0e 94 b9 02 	call	0x572	; 0x572 <sprintf>
	sprintf(dateStr, "%02d.%02d.20%02d", date, month, year);
 418:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <year>
 41c:	1f 92       	push	r1
 41e:	8f 93       	push	r24
 420:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <month>
 424:	1f 92       	push	r1
 426:	8f 93       	push	r24
 428:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <date>
 42c:	1f 92       	push	r1
 42e:	8f 93       	push	r24
 430:	8f e0       	ldi	r24, 0x0F	; 15
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	9f 93       	push	r25
 436:	8f 93       	push	r24
 438:	83 e4       	ldi	r24, 0x43	; 67
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	9f 93       	push	r25
 43e:	8f 93       	push	r24
 440:	0e 94 b9 02 	call	0x572	; 0x572 <sprintf>
}
 444:	8d b7       	in	r24, 0x3d	; 61
 446:	9e b7       	in	r25, 0x3e	; 62
 448:	44 96       	adiw	r24, 0x14	; 20
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	9e bf       	out	0x3e, r25	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	8d bf       	out	0x3d, r24	; 61
 454:	08 95       	ret

00000456 <_Z12FillTHStringb>:

void FillTHString(bool error)
{
	if (error) 
 456:	88 23       	and	r24, r24
 458:	79 f0       	breq	.+30     	; 0x478 <_Z12FillTHStringb+0x22>
	{
		sprintf(thStr, "-- %% -- *C");
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	9f 93       	push	r25
 460:	8f 93       	push	r24
 462:	88 e3       	ldi	r24, 0x38	; 56
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	9f 93       	push	r25
 468:	8f 93       	push	r24
 46a:	0e 94 b9 02 	call	0x572	; 0x572 <sprintf>
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	08 95       	ret
	}
	else 
	{
		sprintf(thStr, "%u %% %u *C", th.humidity, th.temperature);
 478:	ee e4       	ldi	r30, 0x4E	; 78
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	80 81       	ld	r24, Z
 47e:	1f 92       	push	r1
 480:	8f 93       	push	r24
 482:	81 81       	ldd	r24, Z+1	; 0x01
 484:	1f 92       	push	r1
 486:	8f 93       	push	r24
 488:	8c e2       	ldi	r24, 0x2C	; 44
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	9f 93       	push	r25
 48e:	8f 93       	push	r24
 490:	88 e3       	ldi	r24, 0x38	; 56
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	9f 93       	push	r25
 496:	8f 93       	push	r24
 498:	0e 94 b9 02 	call	0x572	; 0x572 <sprintf>
 49c:	8d b7       	in	r24, 0x3d	; 61
 49e:	9e b7       	in	r25, 0x3e	; 62
 4a0:	08 96       	adiw	r24, 0x08	; 8
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	9e bf       	out	0x3e, r25	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	8d bf       	out	0x3d, r24	; 61
 4ac:	08 95       	ret

000004ae <main>:
}

int main(void)
{
	// Initialize ports
	PORTB = 0;
 4ae:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
 4b0:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
 4b2:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF;
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xFF;
 4b8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
 4ba:	1a b8       	out	0x0a, r1	; 10
unsigned char I2C_ReadByte(void);
unsigned char I2C_ReadLastByte(void);

void I2C_Init (void)
{
	TWBR=0x20;//transfer speed(when freq = 8 MHz we get 100 kHz, what we exactly need for communication with ds1307)
 4bc:	80 e2       	ldi	r24, 0x20	; 32
 4be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	
	I2C_Init();
	InitLcd();
 4c2:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z7InitLcdv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c6:	87 ea       	ldi	r24, 0xA7	; 167
 4c8:	91 e6       	ldi	r25, 0x61	; 97
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <main+0x1c>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0x22>
 4d0:	00 00       	nop
	
	_delay_ms(100);
	
	bool showTime = true;
	bool showTimePrev = showTime;
	bool isSwitching = false;
 4d2:	d1 2c       	mov	r13, r1
	InitLcd();
	
	_delay_ms(100);
	
	bool showTime = true;
	bool showTimePrev = showTime;
 4d4:	ee 24       	eor	r14, r14
 4d6:	e3 94       	inc	r14
	bool isSwitching = false;
	bool isStringShifting = false;
	
	while (true)
	{
		showTime = (0 == ((1 << PIND1 & PIND)));
 4d8:	ff 24       	eor	r15, r15
 4da:	f3 94       	inc	r15
 4dc:	00 e0       	ldi	r16, 0x00	; 0
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <main+0x34>
 4e0:	e1 2e       	mov	r14, r17
 4e2:	c9 b1       	in	r28, 0x09	; 9
 4e4:	c2 70       	andi	r28, 0x02	; 2
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
 4e8:	1f 2d       	mov	r17, r15
 4ea:	20 97       	sbiw	r28, 0x00	; 0
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <main+0x42>
 4ee:	10 2f       	mov	r17, r16
		isStringShifting = ((1 << PIND2) & PIND);
		
		if (isStringShifting)
 4f0:	4a 9b       	sbis	0x09, 2	; 9
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <main+0x52>
		{
			if (!isSwitching)
 4f4:	d1 10       	cpse	r13, r1
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <main+0x50>
			{
				ShiftDisplay();
 4f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z12ShiftDisplayv>
 4fc:	01 c0       	rjmp	.+2      	; 0x500 <main+0x52>
			}
			
			else
			{
				 isSwitching = false;
 4fe:	d0 2e       	mov	r13, r16
			}
		}
		
		if (showTime != showTimePrev)
 500:	e1 16       	cp	r14, r17
 502:	19 f0       	breq	.+6      	; 0x50a <main+0x5c>
		{
			ClearLcd();
 504:	0e 94 c0 00 	call	0x180	; 0x180 <_Z8ClearLcdv>
			
			showTimePrev = showTime;
			isSwitching = true;
 508:	df 2c       	mov	r13, r15
 50a:	83 ed       	ldi	r24, 0xD3	; 211
 50c:	90 e3       	ldi	r25, 0x30	; 48
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <main+0x60>
 512:	00 c0       	rjmp	.+0      	; 0x514 <main+0x66>
 514:	00 00       	nop
		}
		
		_delay_ms(50);
		if (showTime)
 516:	cd 2b       	or	r28, r29
 518:	b9 f4       	brne	.+46     	; 0x548 <main+0x9a>
		{
			ReadTime();
 51a:	0e 94 a2 01 	call	0x344	; 0x344 <_Z8ReadTimev>
			SetTime();
 51e:	0e 94 cb 01 	call	0x396	; 0x396 <_Z7SetTimev>
			FillDateAndTimeStrs();
 522:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_Z19FillDateAndTimeStrsv>

void SetPos(unsigned char x, unsigned y)
{
	char adress;
	adress = (0x40*y+x) | 0b10000000;
	SendByte(adress, 0);
 526:	60 2f       	mov	r22, r16
 528:	80 e8       	ldi	r24, 0x80	; 128
 52a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
			
			SetPos(0,0);
			OuputString(dateStr);
 52e:	83 e4       	ldi	r24, 0x43	; 67
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 c9 00 	call	0x192	; 0x192 <_Z11OuputStringPc>
 536:	60 2f       	mov	r22, r16
 538:	80 ec       	ldi	r24, 0xC0	; 192
 53a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
			SetPos(0,1);
			OuputString(timeStr);
 53e:	8a e3       	ldi	r24, 0x3A	; 58
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 c9 00 	call	0x192	; 0x192 <_Z11OuputStringPc>
 546:	cc cf       	rjmp	.-104    	; 0x4e0 <main+0x32>
		}
		else
		{
			FillTHString(DHT_read(0, &th) != 1);
 548:	6e e4       	ldi	r22, 0x4E	; 78
 54a:	71 e0       	ldi	r23, 0x01	; 1
 54c:	80 2f       	mov	r24, r16
 54e:	0e 94 28 01 	call	0x250	; 0x250 <_Z8DHT_readhP2th>
 552:	2f 2d       	mov	r18, r15
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	09 f4       	brne	.+2      	; 0x55a <main+0xac>
 558:	20 2f       	mov	r18, r16
 55a:	82 2f       	mov	r24, r18
 55c:	0e 94 2b 02 	call	0x456	; 0x456 <_Z12FillTHStringb>
 560:	60 2f       	mov	r22, r16
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8SendBytehh>
			SetPos(0,0);
			
			OuputString(thStr);
 568:	88 e3       	ldi	r24, 0x38	; 56
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 c9 00 	call	0x192	; 0x192 <_Z11OuputStringPc>
 570:	b7 cf       	rjmp	.-146    	; 0x4e0 <main+0x32>

00000572 <sprintf>:
 572:	ae e0       	ldi	r26, 0x0E	; 14
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	ef eb       	ldi	r30, 0xBF	; 191
 578:	f2 e0       	ldi	r31, 0x02	; 2
 57a:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__prologue_saves__+0x1c>
 57e:	0d 89       	ldd	r16, Y+21	; 0x15
 580:	1e 89       	ldd	r17, Y+22	; 0x16
 582:	86 e0       	ldi	r24, 0x06	; 6
 584:	8c 83       	std	Y+4, r24	; 0x04
 586:	1a 83       	std	Y+2, r17	; 0x02
 588:	09 83       	std	Y+1, r16	; 0x01
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	9f e7       	ldi	r25, 0x7F	; 127
 58e:	9e 83       	std	Y+6, r25	; 0x06
 590:	8d 83       	std	Y+5, r24	; 0x05
 592:	ae 01       	movw	r20, r28
 594:	47 5e       	subi	r20, 0xE7	; 231
 596:	5f 4f       	sbci	r21, 0xFF	; 255
 598:	6f 89       	ldd	r22, Y+23	; 0x17
 59a:	78 8d       	ldd	r23, Y+24	; 0x18
 59c:	ce 01       	movw	r24, r28
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <vfprintf>
 5a4:	ef 81       	ldd	r30, Y+7	; 0x07
 5a6:	f8 85       	ldd	r31, Y+8	; 0x08
 5a8:	e0 0f       	add	r30, r16
 5aa:	f1 1f       	adc	r31, r17
 5ac:	10 82       	st	Z, r1
 5ae:	2e 96       	adiw	r28, 0x0e	; 14
 5b0:	e4 e0       	ldi	r30, 0x04	; 4
 5b2:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__epilogue_restores__+0x1c>

000005b6 <vfprintf>:
 5b6:	ab e0       	ldi	r26, 0x0B	; 11
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e1 ee       	ldi	r30, 0xE1	; 225
 5bc:	f2 e0       	ldi	r31, 0x02	; 2
 5be:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__prologue_saves__>
 5c2:	6c 01       	movw	r12, r24
 5c4:	7b 01       	movw	r14, r22
 5c6:	8a 01       	movw	r16, r20
 5c8:	fc 01       	movw	r30, r24
 5ca:	17 82       	std	Z+7, r1	; 0x07
 5cc:	16 82       	std	Z+6, r1	; 0x06
 5ce:	83 81       	ldd	r24, Z+3	; 0x03
 5d0:	81 ff       	sbrs	r24, 1
 5d2:	cc c1       	rjmp	.+920    	; 0x96c <__stack+0x6d>
 5d4:	ce 01       	movw	r24, r28
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	3c 01       	movw	r6, r24
 5da:	f6 01       	movw	r30, r12
 5dc:	93 81       	ldd	r25, Z+3	; 0x03
 5de:	f7 01       	movw	r30, r14
 5e0:	93 fd       	sbrc	r25, 3
 5e2:	85 91       	lpm	r24, Z+
 5e4:	93 ff       	sbrs	r25, 3
 5e6:	81 91       	ld	r24, Z+
 5e8:	7f 01       	movw	r14, r30
 5ea:	88 23       	and	r24, r24
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <vfprintf+0x3a>
 5ee:	ba c1       	rjmp	.+884    	; 0x964 <__stack+0x65>
 5f0:	85 32       	cpi	r24, 0x25	; 37
 5f2:	39 f4       	brne	.+14     	; 0x602 <vfprintf+0x4c>
 5f4:	93 fd       	sbrc	r25, 3
 5f6:	85 91       	lpm	r24, Z+
 5f8:	93 ff       	sbrs	r25, 3
 5fa:	81 91       	ld	r24, Z+
 5fc:	7f 01       	movw	r14, r30
 5fe:	85 32       	cpi	r24, 0x25	; 37
 600:	29 f4       	brne	.+10     	; 0x60c <vfprintf+0x56>
 602:	b6 01       	movw	r22, r12
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 60a:	e7 cf       	rjmp	.-50     	; 0x5da <vfprintf+0x24>
 60c:	91 2c       	mov	r9, r1
 60e:	21 2c       	mov	r2, r1
 610:	31 2c       	mov	r3, r1
 612:	ff e1       	ldi	r31, 0x1F	; 31
 614:	f3 15       	cp	r31, r3
 616:	d8 f0       	brcs	.+54     	; 0x64e <vfprintf+0x98>
 618:	8b 32       	cpi	r24, 0x2B	; 43
 61a:	79 f0       	breq	.+30     	; 0x63a <vfprintf+0x84>
 61c:	38 f4       	brcc	.+14     	; 0x62c <vfprintf+0x76>
 61e:	80 32       	cpi	r24, 0x20	; 32
 620:	79 f0       	breq	.+30     	; 0x640 <vfprintf+0x8a>
 622:	83 32       	cpi	r24, 0x23	; 35
 624:	a1 f4       	brne	.+40     	; 0x64e <vfprintf+0x98>
 626:	23 2d       	mov	r18, r3
 628:	20 61       	ori	r18, 0x10	; 16
 62a:	1d c0       	rjmp	.+58     	; 0x666 <vfprintf+0xb0>
 62c:	8d 32       	cpi	r24, 0x2D	; 45
 62e:	61 f0       	breq	.+24     	; 0x648 <vfprintf+0x92>
 630:	80 33       	cpi	r24, 0x30	; 48
 632:	69 f4       	brne	.+26     	; 0x64e <vfprintf+0x98>
 634:	23 2d       	mov	r18, r3
 636:	21 60       	ori	r18, 0x01	; 1
 638:	16 c0       	rjmp	.+44     	; 0x666 <vfprintf+0xb0>
 63a:	83 2d       	mov	r24, r3
 63c:	82 60       	ori	r24, 0x02	; 2
 63e:	38 2e       	mov	r3, r24
 640:	e3 2d       	mov	r30, r3
 642:	e4 60       	ori	r30, 0x04	; 4
 644:	3e 2e       	mov	r3, r30
 646:	2a c0       	rjmp	.+84     	; 0x69c <vfprintf+0xe6>
 648:	f3 2d       	mov	r31, r3
 64a:	f8 60       	ori	r31, 0x08	; 8
 64c:	1d c0       	rjmp	.+58     	; 0x688 <vfprintf+0xd2>
 64e:	37 fc       	sbrc	r3, 7
 650:	2d c0       	rjmp	.+90     	; 0x6ac <vfprintf+0xf6>
 652:	20 ed       	ldi	r18, 0xD0	; 208
 654:	28 0f       	add	r18, r24
 656:	2a 30       	cpi	r18, 0x0A	; 10
 658:	40 f0       	brcs	.+16     	; 0x66a <vfprintf+0xb4>
 65a:	8e 32       	cpi	r24, 0x2E	; 46
 65c:	b9 f4       	brne	.+46     	; 0x68c <vfprintf+0xd6>
 65e:	36 fc       	sbrc	r3, 6
 660:	81 c1       	rjmp	.+770    	; 0x964 <__stack+0x65>
 662:	23 2d       	mov	r18, r3
 664:	20 64       	ori	r18, 0x40	; 64
 666:	32 2e       	mov	r3, r18
 668:	19 c0       	rjmp	.+50     	; 0x69c <vfprintf+0xe6>
 66a:	36 fe       	sbrs	r3, 6
 66c:	06 c0       	rjmp	.+12     	; 0x67a <vfprintf+0xc4>
 66e:	8a e0       	ldi	r24, 0x0A	; 10
 670:	98 9e       	mul	r9, r24
 672:	20 0d       	add	r18, r0
 674:	11 24       	eor	r1, r1
 676:	92 2e       	mov	r9, r18
 678:	11 c0       	rjmp	.+34     	; 0x69c <vfprintf+0xe6>
 67a:	ea e0       	ldi	r30, 0x0A	; 10
 67c:	2e 9e       	mul	r2, r30
 67e:	20 0d       	add	r18, r0
 680:	11 24       	eor	r1, r1
 682:	22 2e       	mov	r2, r18
 684:	f3 2d       	mov	r31, r3
 686:	f0 62       	ori	r31, 0x20	; 32
 688:	3f 2e       	mov	r3, r31
 68a:	08 c0       	rjmp	.+16     	; 0x69c <vfprintf+0xe6>
 68c:	8c 36       	cpi	r24, 0x6C	; 108
 68e:	21 f4       	brne	.+8      	; 0x698 <vfprintf+0xe2>
 690:	83 2d       	mov	r24, r3
 692:	80 68       	ori	r24, 0x80	; 128
 694:	38 2e       	mov	r3, r24
 696:	02 c0       	rjmp	.+4      	; 0x69c <vfprintf+0xe6>
 698:	88 36       	cpi	r24, 0x68	; 104
 69a:	41 f4       	brne	.+16     	; 0x6ac <vfprintf+0xf6>
 69c:	f7 01       	movw	r30, r14
 69e:	93 fd       	sbrc	r25, 3
 6a0:	85 91       	lpm	r24, Z+
 6a2:	93 ff       	sbrs	r25, 3
 6a4:	81 91       	ld	r24, Z+
 6a6:	7f 01       	movw	r14, r30
 6a8:	81 11       	cpse	r24, r1
 6aa:	b3 cf       	rjmp	.-154    	; 0x612 <vfprintf+0x5c>
 6ac:	98 2f       	mov	r25, r24
 6ae:	9f 7d       	andi	r25, 0xDF	; 223
 6b0:	95 54       	subi	r25, 0x45	; 69
 6b2:	93 30       	cpi	r25, 0x03	; 3
 6b4:	28 f4       	brcc	.+10     	; 0x6c0 <vfprintf+0x10a>
 6b6:	0c 5f       	subi	r16, 0xFC	; 252
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	9f e3       	ldi	r25, 0x3F	; 63
 6bc:	99 83       	std	Y+1, r25	; 0x01
 6be:	0d c0       	rjmp	.+26     	; 0x6da <vfprintf+0x124>
 6c0:	83 36       	cpi	r24, 0x63	; 99
 6c2:	31 f0       	breq	.+12     	; 0x6d0 <vfprintf+0x11a>
 6c4:	83 37       	cpi	r24, 0x73	; 115
 6c6:	71 f0       	breq	.+28     	; 0x6e4 <vfprintf+0x12e>
 6c8:	83 35       	cpi	r24, 0x53	; 83
 6ca:	09 f0       	breq	.+2      	; 0x6ce <vfprintf+0x118>
 6cc:	59 c0       	rjmp	.+178    	; 0x780 <vfprintf+0x1ca>
 6ce:	21 c0       	rjmp	.+66     	; 0x712 <vfprintf+0x15c>
 6d0:	f8 01       	movw	r30, r16
 6d2:	80 81       	ld	r24, Z
 6d4:	89 83       	std	Y+1, r24	; 0x01
 6d6:	0e 5f       	subi	r16, 0xFE	; 254
 6d8:	1f 4f       	sbci	r17, 0xFF	; 255
 6da:	88 24       	eor	r8, r8
 6dc:	83 94       	inc	r8
 6de:	91 2c       	mov	r9, r1
 6e0:	53 01       	movw	r10, r6
 6e2:	13 c0       	rjmp	.+38     	; 0x70a <vfprintf+0x154>
 6e4:	28 01       	movw	r4, r16
 6e6:	f2 e0       	ldi	r31, 0x02	; 2
 6e8:	4f 0e       	add	r4, r31
 6ea:	51 1c       	adc	r5, r1
 6ec:	f8 01       	movw	r30, r16
 6ee:	a0 80       	ld	r10, Z
 6f0:	b1 80       	ldd	r11, Z+1	; 0x01
 6f2:	36 fe       	sbrs	r3, 6
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <vfprintf+0x146>
 6f6:	69 2d       	mov	r22, r9
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <vfprintf+0x14a>
 6fc:	6f ef       	ldi	r22, 0xFF	; 255
 6fe:	7f ef       	ldi	r23, 0xFF	; 255
 700:	c5 01       	movw	r24, r10
 702:	0e 94 c7 04 	call	0x98e	; 0x98e <strnlen>
 706:	4c 01       	movw	r8, r24
 708:	82 01       	movw	r16, r4
 70a:	f3 2d       	mov	r31, r3
 70c:	ff 77       	andi	r31, 0x7F	; 127
 70e:	3f 2e       	mov	r3, r31
 710:	16 c0       	rjmp	.+44     	; 0x73e <vfprintf+0x188>
 712:	28 01       	movw	r4, r16
 714:	22 e0       	ldi	r18, 0x02	; 2
 716:	42 0e       	add	r4, r18
 718:	51 1c       	adc	r5, r1
 71a:	f8 01       	movw	r30, r16
 71c:	a0 80       	ld	r10, Z
 71e:	b1 80       	ldd	r11, Z+1	; 0x01
 720:	36 fe       	sbrs	r3, 6
 722:	03 c0       	rjmp	.+6      	; 0x72a <vfprintf+0x174>
 724:	69 2d       	mov	r22, r9
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <vfprintf+0x178>
 72a:	6f ef       	ldi	r22, 0xFF	; 255
 72c:	7f ef       	ldi	r23, 0xFF	; 255
 72e:	c5 01       	movw	r24, r10
 730:	0e 94 bc 04 	call	0x978	; 0x978 <strnlen_P>
 734:	4c 01       	movw	r8, r24
 736:	f3 2d       	mov	r31, r3
 738:	f0 68       	ori	r31, 0x80	; 128
 73a:	3f 2e       	mov	r3, r31
 73c:	82 01       	movw	r16, r4
 73e:	33 fc       	sbrc	r3, 3
 740:	1b c0       	rjmp	.+54     	; 0x778 <vfprintf+0x1c2>
 742:	82 2d       	mov	r24, r2
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	88 16       	cp	r8, r24
 748:	99 06       	cpc	r9, r25
 74a:	b0 f4       	brcc	.+44     	; 0x778 <vfprintf+0x1c2>
 74c:	b6 01       	movw	r22, r12
 74e:	80 e2       	ldi	r24, 0x20	; 32
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 756:	2a 94       	dec	r2
 758:	f4 cf       	rjmp	.-24     	; 0x742 <vfprintf+0x18c>
 75a:	f5 01       	movw	r30, r10
 75c:	37 fc       	sbrc	r3, 7
 75e:	85 91       	lpm	r24, Z+
 760:	37 fe       	sbrs	r3, 7
 762:	81 91       	ld	r24, Z+
 764:	5f 01       	movw	r10, r30
 766:	b6 01       	movw	r22, r12
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 76e:	21 10       	cpse	r2, r1
 770:	2a 94       	dec	r2
 772:	21 e0       	ldi	r18, 0x01	; 1
 774:	82 1a       	sub	r8, r18
 776:	91 08       	sbc	r9, r1
 778:	81 14       	cp	r8, r1
 77a:	91 04       	cpc	r9, r1
 77c:	71 f7       	brne	.-36     	; 0x75a <vfprintf+0x1a4>
 77e:	e8 c0       	rjmp	.+464    	; 0x950 <__stack+0x51>
 780:	84 36       	cpi	r24, 0x64	; 100
 782:	11 f0       	breq	.+4      	; 0x788 <vfprintf+0x1d2>
 784:	89 36       	cpi	r24, 0x69	; 105
 786:	41 f5       	brne	.+80     	; 0x7d8 <vfprintf+0x222>
 788:	f8 01       	movw	r30, r16
 78a:	37 fe       	sbrs	r3, 7
 78c:	07 c0       	rjmp	.+14     	; 0x79c <vfprintf+0x1e6>
 78e:	60 81       	ld	r22, Z
 790:	71 81       	ldd	r23, Z+1	; 0x01
 792:	82 81       	ldd	r24, Z+2	; 0x02
 794:	93 81       	ldd	r25, Z+3	; 0x03
 796:	0c 5f       	subi	r16, 0xFC	; 252
 798:	1f 4f       	sbci	r17, 0xFF	; 255
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <vfprintf+0x1f6>
 79c:	60 81       	ld	r22, Z
 79e:	71 81       	ldd	r23, Z+1	; 0x01
 7a0:	07 2e       	mov	r0, r23
 7a2:	00 0c       	add	r0, r0
 7a4:	88 0b       	sbc	r24, r24
 7a6:	99 0b       	sbc	r25, r25
 7a8:	0e 5f       	subi	r16, 0xFE	; 254
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	f3 2d       	mov	r31, r3
 7ae:	ff 76       	andi	r31, 0x6F	; 111
 7b0:	3f 2e       	mov	r3, r31
 7b2:	97 ff       	sbrs	r25, 7
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <vfprintf+0x212>
 7b6:	90 95       	com	r25
 7b8:	80 95       	com	r24
 7ba:	70 95       	com	r23
 7bc:	61 95       	neg	r22
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	8f 4f       	sbci	r24, 0xFF	; 255
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	f0 68       	ori	r31, 0x80	; 128
 7c6:	3f 2e       	mov	r3, r31
 7c8:	2a e0       	ldi	r18, 0x0A	; 10
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	a3 01       	movw	r20, r6
 7ce:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__ultoa_invert>
 7d2:	88 2e       	mov	r8, r24
 7d4:	86 18       	sub	r8, r6
 7d6:	45 c0       	rjmp	.+138    	; 0x862 <vfprintf+0x2ac>
 7d8:	85 37       	cpi	r24, 0x75	; 117
 7da:	31 f4       	brne	.+12     	; 0x7e8 <vfprintf+0x232>
 7dc:	23 2d       	mov	r18, r3
 7de:	2f 7e       	andi	r18, 0xEF	; 239
 7e0:	b2 2e       	mov	r11, r18
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	25 c0       	rjmp	.+74     	; 0x832 <vfprintf+0x27c>
 7e8:	93 2d       	mov	r25, r3
 7ea:	99 7f       	andi	r25, 0xF9	; 249
 7ec:	b9 2e       	mov	r11, r25
 7ee:	8f 36       	cpi	r24, 0x6F	; 111
 7f0:	c1 f0       	breq	.+48     	; 0x822 <vfprintf+0x26c>
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <vfprintf+0x244>
 7f4:	88 35       	cpi	r24, 0x58	; 88
 7f6:	79 f0       	breq	.+30     	; 0x816 <vfprintf+0x260>
 7f8:	b5 c0       	rjmp	.+362    	; 0x964 <__stack+0x65>
 7fa:	80 37       	cpi	r24, 0x70	; 112
 7fc:	19 f0       	breq	.+6      	; 0x804 <vfprintf+0x24e>
 7fe:	88 37       	cpi	r24, 0x78	; 120
 800:	21 f0       	breq	.+8      	; 0x80a <vfprintf+0x254>
 802:	b0 c0       	rjmp	.+352    	; 0x964 <__stack+0x65>
 804:	e9 2f       	mov	r30, r25
 806:	e0 61       	ori	r30, 0x10	; 16
 808:	be 2e       	mov	r11, r30
 80a:	b4 fe       	sbrs	r11, 4
 80c:	0d c0       	rjmp	.+26     	; 0x828 <vfprintf+0x272>
 80e:	fb 2d       	mov	r31, r11
 810:	f4 60       	ori	r31, 0x04	; 4
 812:	bf 2e       	mov	r11, r31
 814:	09 c0       	rjmp	.+18     	; 0x828 <vfprintf+0x272>
 816:	34 fe       	sbrs	r3, 4
 818:	0a c0       	rjmp	.+20     	; 0x82e <vfprintf+0x278>
 81a:	29 2f       	mov	r18, r25
 81c:	26 60       	ori	r18, 0x06	; 6
 81e:	b2 2e       	mov	r11, r18
 820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0x278>
 822:	28 e0       	ldi	r18, 0x08	; 8
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	05 c0       	rjmp	.+10     	; 0x832 <vfprintf+0x27c>
 828:	20 e1       	ldi	r18, 0x10	; 16
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x27c>
 82e:	20 e1       	ldi	r18, 0x10	; 16
 830:	32 e0       	ldi	r19, 0x02	; 2
 832:	f8 01       	movw	r30, r16
 834:	b7 fe       	sbrs	r11, 7
 836:	07 c0       	rjmp	.+14     	; 0x846 <vfprintf+0x290>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	0c 5f       	subi	r16, 0xFC	; 252
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	06 c0       	rjmp	.+12     	; 0x852 <vfprintf+0x29c>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	a3 01       	movw	r20, r6
 854:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__ultoa_invert>
 858:	88 2e       	mov	r8, r24
 85a:	86 18       	sub	r8, r6
 85c:	fb 2d       	mov	r31, r11
 85e:	ff 77       	andi	r31, 0x7F	; 127
 860:	3f 2e       	mov	r3, r31
 862:	36 fe       	sbrs	r3, 6
 864:	0d c0       	rjmp	.+26     	; 0x880 <vfprintf+0x2ca>
 866:	23 2d       	mov	r18, r3
 868:	2e 7f       	andi	r18, 0xFE	; 254
 86a:	a2 2e       	mov	r10, r18
 86c:	89 14       	cp	r8, r9
 86e:	58 f4       	brcc	.+22     	; 0x886 <vfprintf+0x2d0>
 870:	34 fe       	sbrs	r3, 4
 872:	0b c0       	rjmp	.+22     	; 0x88a <vfprintf+0x2d4>
 874:	32 fc       	sbrc	r3, 2
 876:	09 c0       	rjmp	.+18     	; 0x88a <vfprintf+0x2d4>
 878:	83 2d       	mov	r24, r3
 87a:	8e 7e       	andi	r24, 0xEE	; 238
 87c:	a8 2e       	mov	r10, r24
 87e:	05 c0       	rjmp	.+10     	; 0x88a <vfprintf+0x2d4>
 880:	b8 2c       	mov	r11, r8
 882:	a3 2c       	mov	r10, r3
 884:	03 c0       	rjmp	.+6      	; 0x88c <vfprintf+0x2d6>
 886:	b8 2c       	mov	r11, r8
 888:	01 c0       	rjmp	.+2      	; 0x88c <vfprintf+0x2d6>
 88a:	b9 2c       	mov	r11, r9
 88c:	a4 fe       	sbrs	r10, 4
 88e:	0f c0       	rjmp	.+30     	; 0x8ae <vfprintf+0x2f8>
 890:	fe 01       	movw	r30, r28
 892:	e8 0d       	add	r30, r8
 894:	f1 1d       	adc	r31, r1
 896:	80 81       	ld	r24, Z
 898:	80 33       	cpi	r24, 0x30	; 48
 89a:	21 f4       	brne	.+8      	; 0x8a4 <vfprintf+0x2ee>
 89c:	9a 2d       	mov	r25, r10
 89e:	99 7e       	andi	r25, 0xE9	; 233
 8a0:	a9 2e       	mov	r10, r25
 8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <vfprintf+0x300>
 8a4:	a2 fe       	sbrs	r10, 2
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <vfprintf+0x2fe>
 8a8:	b3 94       	inc	r11
 8aa:	b3 94       	inc	r11
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <vfprintf+0x300>
 8ae:	8a 2d       	mov	r24, r10
 8b0:	86 78       	andi	r24, 0x86	; 134
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <vfprintf+0x300>
 8b4:	b3 94       	inc	r11
 8b6:	a3 fc       	sbrc	r10, 3
 8b8:	11 c0       	rjmp	.+34     	; 0x8dc <vfprintf+0x326>
 8ba:	a0 fe       	sbrs	r10, 0
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x314>
 8be:	b2 14       	cp	r11, r2
 8c0:	88 f4       	brcc	.+34     	; 0x8e4 <vfprintf+0x32e>
 8c2:	28 0c       	add	r2, r8
 8c4:	92 2c       	mov	r9, r2
 8c6:	9b 18       	sub	r9, r11
 8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <vfprintf+0x330>
 8ca:	b2 14       	cp	r11, r2
 8cc:	60 f4       	brcc	.+24     	; 0x8e6 <vfprintf+0x330>
 8ce:	b6 01       	movw	r22, r12
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 8d8:	b3 94       	inc	r11
 8da:	f7 cf       	rjmp	.-18     	; 0x8ca <vfprintf+0x314>
 8dc:	b2 14       	cp	r11, r2
 8de:	18 f4       	brcc	.+6      	; 0x8e6 <vfprintf+0x330>
 8e0:	2b 18       	sub	r2, r11
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <vfprintf+0x332>
 8e4:	98 2c       	mov	r9, r8
 8e6:	21 2c       	mov	r2, r1
 8e8:	a4 fe       	sbrs	r10, 4
 8ea:	10 c0       	rjmp	.+32     	; 0x90c <__stack+0xd>
 8ec:	b6 01       	movw	r22, r12
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 8f6:	a2 fe       	sbrs	r10, 2
 8f8:	17 c0       	rjmp	.+46     	; 0x928 <__stack+0x29>
 8fa:	a1 fc       	sbrc	r10, 1
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <__stack+0x5>
 8fe:	88 e7       	ldi	r24, 0x78	; 120
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
 904:	88 e5       	ldi	r24, 0x58	; 88
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	b6 01       	movw	r22, r12
 90a:	0c c0       	rjmp	.+24     	; 0x924 <__stack+0x25>
 90c:	8a 2d       	mov	r24, r10
 90e:	86 78       	andi	r24, 0x86	; 134
 910:	59 f0       	breq	.+22     	; 0x928 <__stack+0x29>
 912:	a1 fe       	sbrs	r10, 1
 914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
 916:	8b e2       	ldi	r24, 0x2B	; 43
 918:	01 c0       	rjmp	.+2      	; 0x91c <__stack+0x1d>
 91a:	80 e2       	ldi	r24, 0x20	; 32
 91c:	a7 fc       	sbrc	r10, 7
 91e:	8d e2       	ldi	r24, 0x2D	; 45
 920:	b6 01       	movw	r22, r12
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 928:	89 14       	cp	r8, r9
 92a:	38 f4       	brcc	.+14     	; 0x93a <__stack+0x3b>
 92c:	b6 01       	movw	r22, r12
 92e:	80 e3       	ldi	r24, 0x30	; 48
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 936:	9a 94       	dec	r9
 938:	f7 cf       	rjmp	.-18     	; 0x928 <__stack+0x29>
 93a:	8a 94       	dec	r8
 93c:	f3 01       	movw	r30, r6
 93e:	e8 0d       	add	r30, r8
 940:	f1 1d       	adc	r31, r1
 942:	80 81       	ld	r24, Z
 944:	b6 01       	movw	r22, r12
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 94c:	81 10       	cpse	r8, r1
 94e:	f5 cf       	rjmp	.-22     	; 0x93a <__stack+0x3b>
 950:	22 20       	and	r2, r2
 952:	09 f4       	brne	.+2      	; 0x956 <__stack+0x57>
 954:	42 ce       	rjmp	.-892    	; 0x5da <vfprintf+0x24>
 956:	b6 01       	movw	r22, r12
 958:	80 e2       	ldi	r24, 0x20	; 32
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fputc>
 960:	2a 94       	dec	r2
 962:	f6 cf       	rjmp	.-20     	; 0x950 <__stack+0x51>
 964:	f6 01       	movw	r30, r12
 966:	86 81       	ldd	r24, Z+6	; 0x06
 968:	97 81       	ldd	r25, Z+7	; 0x07
 96a:	02 c0       	rjmp	.+4      	; 0x970 <__stack+0x71>
 96c:	8f ef       	ldi	r24, 0xFF	; 255
 96e:	9f ef       	ldi	r25, 0xFF	; 255
 970:	2b 96       	adiw	r28, 0x0b	; 11
 972:	e2 e1       	ldi	r30, 0x12	; 18
 974:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__epilogue_restores__>

00000978 <strnlen_P>:
 978:	fc 01       	movw	r30, r24
 97a:	05 90       	lpm	r0, Z+
 97c:	61 50       	subi	r22, 0x01	; 1
 97e:	70 40       	sbci	r23, 0x00	; 0
 980:	01 10       	cpse	r0, r1
 982:	d8 f7       	brcc	.-10     	; 0x97a <strnlen_P+0x2>
 984:	80 95       	com	r24
 986:	90 95       	com	r25
 988:	8e 0f       	add	r24, r30
 98a:	9f 1f       	adc	r25, r31
 98c:	08 95       	ret

0000098e <strnlen>:
 98e:	fc 01       	movw	r30, r24
 990:	61 50       	subi	r22, 0x01	; 1
 992:	70 40       	sbci	r23, 0x00	; 0
 994:	01 90       	ld	r0, Z+
 996:	01 10       	cpse	r0, r1
 998:	d8 f7       	brcc	.-10     	; 0x990 <strnlen+0x2>
 99a:	80 95       	com	r24
 99c:	90 95       	com	r25
 99e:	8e 0f       	add	r24, r30
 9a0:	9f 1f       	adc	r25, r31
 9a2:	08 95       	ret

000009a4 <fputc>:
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	fb 01       	movw	r30, r22
 9ae:	23 81       	ldd	r18, Z+3	; 0x03
 9b0:	21 fd       	sbrc	r18, 1
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <fputc+0x16>
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	9f ef       	ldi	r25, 0xFF	; 255
 9b8:	2c c0       	rjmp	.+88     	; 0xa12 <fputc+0x6e>
 9ba:	22 ff       	sbrs	r18, 2
 9bc:	16 c0       	rjmp	.+44     	; 0x9ea <fputc+0x46>
 9be:	46 81       	ldd	r20, Z+6	; 0x06
 9c0:	57 81       	ldd	r21, Z+7	; 0x07
 9c2:	24 81       	ldd	r18, Z+4	; 0x04
 9c4:	35 81       	ldd	r19, Z+5	; 0x05
 9c6:	42 17       	cp	r20, r18
 9c8:	53 07       	cpc	r21, r19
 9ca:	44 f4       	brge	.+16     	; 0x9dc <fputc+0x38>
 9cc:	a0 81       	ld	r26, Z
 9ce:	b1 81       	ldd	r27, Z+1	; 0x01
 9d0:	9d 01       	movw	r18, r26
 9d2:	2f 5f       	subi	r18, 0xFF	; 255
 9d4:	3f 4f       	sbci	r19, 0xFF	; 255
 9d6:	31 83       	std	Z+1, r19	; 0x01
 9d8:	20 83       	st	Z, r18
 9da:	8c 93       	st	X, r24
 9dc:	26 81       	ldd	r18, Z+6	; 0x06
 9de:	37 81       	ldd	r19, Z+7	; 0x07
 9e0:	2f 5f       	subi	r18, 0xFF	; 255
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
 9e4:	37 83       	std	Z+7, r19	; 0x07
 9e6:	26 83       	std	Z+6, r18	; 0x06
 9e8:	14 c0       	rjmp	.+40     	; 0xa12 <fputc+0x6e>
 9ea:	8b 01       	movw	r16, r22
 9ec:	ec 01       	movw	r28, r24
 9ee:	fb 01       	movw	r30, r22
 9f0:	00 84       	ldd	r0, Z+8	; 0x08
 9f2:	f1 85       	ldd	r31, Z+9	; 0x09
 9f4:	e0 2d       	mov	r30, r0
 9f6:	09 95       	icall
 9f8:	89 2b       	or	r24, r25
 9fa:	e1 f6       	brne	.-72     	; 0x9b4 <fputc+0x10>
 9fc:	d8 01       	movw	r26, r16
 9fe:	16 96       	adiw	r26, 0x06	; 6
 a00:	8d 91       	ld	r24, X+
 a02:	9c 91       	ld	r25, X
 a04:	17 97       	sbiw	r26, 0x07	; 7
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	17 96       	adiw	r26, 0x07	; 7
 a0a:	9c 93       	st	X, r25
 a0c:	8e 93       	st	-X, r24
 a0e:	16 97       	sbiw	r26, 0x06	; 6
 a10:	ce 01       	movw	r24, r28
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	1f 91       	pop	r17
 a18:	0f 91       	pop	r16
 a1a:	08 95       	ret

00000a1c <__ultoa_invert>:
 a1c:	fa 01       	movw	r30, r20
 a1e:	aa 27       	eor	r26, r26
 a20:	28 30       	cpi	r18, 0x08	; 8
 a22:	51 f1       	breq	.+84     	; 0xa78 <__ultoa_invert+0x5c>
 a24:	20 31       	cpi	r18, 0x10	; 16
 a26:	81 f1       	breq	.+96     	; 0xa88 <__ultoa_invert+0x6c>
 a28:	e8 94       	clt
 a2a:	6f 93       	push	r22
 a2c:	6e 7f       	andi	r22, 0xFE	; 254
 a2e:	6e 5f       	subi	r22, 0xFE	; 254
 a30:	7f 4f       	sbci	r23, 0xFF	; 255
 a32:	8f 4f       	sbci	r24, 0xFF	; 255
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	af 4f       	sbci	r26, 0xFF	; 255
 a38:	b1 e0       	ldi	r27, 0x01	; 1
 a3a:	3e d0       	rcall	.+124    	; 0xab8 <__ultoa_invert+0x9c>
 a3c:	b4 e0       	ldi	r27, 0x04	; 4
 a3e:	3c d0       	rcall	.+120    	; 0xab8 <__ultoa_invert+0x9c>
 a40:	67 0f       	add	r22, r23
 a42:	78 1f       	adc	r23, r24
 a44:	89 1f       	adc	r24, r25
 a46:	9a 1f       	adc	r25, r26
 a48:	a1 1d       	adc	r26, r1
 a4a:	68 0f       	add	r22, r24
 a4c:	79 1f       	adc	r23, r25
 a4e:	8a 1f       	adc	r24, r26
 a50:	91 1d       	adc	r25, r1
 a52:	a1 1d       	adc	r26, r1
 a54:	6a 0f       	add	r22, r26
 a56:	71 1d       	adc	r23, r1
 a58:	81 1d       	adc	r24, r1
 a5a:	91 1d       	adc	r25, r1
 a5c:	a1 1d       	adc	r26, r1
 a5e:	20 d0       	rcall	.+64     	; 0xaa0 <__ultoa_invert+0x84>
 a60:	09 f4       	brne	.+2      	; 0xa64 <__ultoa_invert+0x48>
 a62:	68 94       	set
 a64:	3f 91       	pop	r19
 a66:	2a e0       	ldi	r18, 0x0A	; 10
 a68:	26 9f       	mul	r18, r22
 a6a:	11 24       	eor	r1, r1
 a6c:	30 19       	sub	r19, r0
 a6e:	30 5d       	subi	r19, 0xD0	; 208
 a70:	31 93       	st	Z+, r19
 a72:	de f6       	brtc	.-74     	; 0xa2a <__ultoa_invert+0xe>
 a74:	cf 01       	movw	r24, r30
 a76:	08 95       	ret
 a78:	46 2f       	mov	r20, r22
 a7a:	47 70       	andi	r20, 0x07	; 7
 a7c:	40 5d       	subi	r20, 0xD0	; 208
 a7e:	41 93       	st	Z+, r20
 a80:	b3 e0       	ldi	r27, 0x03	; 3
 a82:	0f d0       	rcall	.+30     	; 0xaa2 <__ultoa_invert+0x86>
 a84:	c9 f7       	brne	.-14     	; 0xa78 <__ultoa_invert+0x5c>
 a86:	f6 cf       	rjmp	.-20     	; 0xa74 <__ultoa_invert+0x58>
 a88:	46 2f       	mov	r20, r22
 a8a:	4f 70       	andi	r20, 0x0F	; 15
 a8c:	40 5d       	subi	r20, 0xD0	; 208
 a8e:	4a 33       	cpi	r20, 0x3A	; 58
 a90:	18 f0       	brcs	.+6      	; 0xa98 <__ultoa_invert+0x7c>
 a92:	49 5d       	subi	r20, 0xD9	; 217
 a94:	31 fd       	sbrc	r19, 1
 a96:	40 52       	subi	r20, 0x20	; 32
 a98:	41 93       	st	Z+, r20
 a9a:	02 d0       	rcall	.+4      	; 0xaa0 <__ultoa_invert+0x84>
 a9c:	a9 f7       	brne	.-22     	; 0xa88 <__ultoa_invert+0x6c>
 a9e:	ea cf       	rjmp	.-44     	; 0xa74 <__ultoa_invert+0x58>
 aa0:	b4 e0       	ldi	r27, 0x04	; 4
 aa2:	a6 95       	lsr	r26
 aa4:	97 95       	ror	r25
 aa6:	87 95       	ror	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	ba 95       	dec	r27
 aae:	c9 f7       	brne	.-14     	; 0xaa2 <__ultoa_invert+0x86>
 ab0:	00 97       	sbiw	r24, 0x00	; 0
 ab2:	61 05       	cpc	r22, r1
 ab4:	71 05       	cpc	r23, r1
 ab6:	08 95       	ret
 ab8:	9b 01       	movw	r18, r22
 aba:	ac 01       	movw	r20, r24
 abc:	0a 2e       	mov	r0, r26
 abe:	06 94       	lsr	r0
 ac0:	57 95       	ror	r21
 ac2:	47 95       	ror	r20
 ac4:	37 95       	ror	r19
 ac6:	27 95       	ror	r18
 ac8:	ba 95       	dec	r27
 aca:	c9 f7       	brne	.-14     	; 0xabe <__ultoa_invert+0xa2>
 acc:	62 0f       	add	r22, r18
 ace:	73 1f       	adc	r23, r19
 ad0:	84 1f       	adc	r24, r20
 ad2:	95 1f       	adc	r25, r21
 ad4:	a0 1d       	adc	r26, r0
 ad6:	08 95       	ret

00000ad8 <__prologue_saves__>:
 ad8:	2f 92       	push	r2
 ada:	3f 92       	push	r3
 adc:	4f 92       	push	r4
 ade:	5f 92       	push	r5
 ae0:	6f 92       	push	r6
 ae2:	7f 92       	push	r7
 ae4:	8f 92       	push	r8
 ae6:	9f 92       	push	r9
 ae8:	af 92       	push	r10
 aea:	bf 92       	push	r11
 aec:	cf 92       	push	r12
 aee:	df 92       	push	r13
 af0:	ef 92       	push	r14
 af2:	ff 92       	push	r15
 af4:	0f 93       	push	r16
 af6:	1f 93       	push	r17
 af8:	cf 93       	push	r28
 afa:	df 93       	push	r29
 afc:	cd b7       	in	r28, 0x3d	; 61
 afe:	de b7       	in	r29, 0x3e	; 62
 b00:	ca 1b       	sub	r28, r26
 b02:	db 0b       	sbc	r29, r27
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	f8 94       	cli
 b08:	de bf       	out	0x3e, r29	; 62
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	cd bf       	out	0x3d, r28	; 61
 b0e:	09 94       	ijmp

00000b10 <__epilogue_restores__>:
 b10:	2a 88       	ldd	r2, Y+18	; 0x12
 b12:	39 88       	ldd	r3, Y+17	; 0x11
 b14:	48 88       	ldd	r4, Y+16	; 0x10
 b16:	5f 84       	ldd	r5, Y+15	; 0x0f
 b18:	6e 84       	ldd	r6, Y+14	; 0x0e
 b1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b20:	aa 84       	ldd	r10, Y+10	; 0x0a
 b22:	b9 84       	ldd	r11, Y+9	; 0x09
 b24:	c8 84       	ldd	r12, Y+8	; 0x08
 b26:	df 80       	ldd	r13, Y+7	; 0x07
 b28:	ee 80       	ldd	r14, Y+6	; 0x06
 b2a:	fd 80       	ldd	r15, Y+5	; 0x05
 b2c:	0c 81       	ldd	r16, Y+4	; 0x04
 b2e:	1b 81       	ldd	r17, Y+3	; 0x03
 b30:	aa 81       	ldd	r26, Y+2	; 0x02
 b32:	b9 81       	ldd	r27, Y+1	; 0x01
 b34:	ce 0f       	add	r28, r30
 b36:	d1 1d       	adc	r29, r1
 b38:	0f b6       	in	r0, 0x3f	; 63
 b3a:	f8 94       	cli
 b3c:	de bf       	out	0x3e, r29	; 62
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	cd bf       	out	0x3d, r28	; 61
 b42:	ed 01       	movw	r28, r26
 b44:	08 95       	ret

00000b46 <_exit>:
 b46:	f8 94       	cli

00000b48 <__stop_program>:
 b48:	ff cf       	rjmp	.-2      	; 0xb48 <__stop_program>
