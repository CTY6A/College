1. Сделать красивое оформление
2. Передавать файлы целиком, а не название
На сервере должен быть реализован REST API
На клиенте - Single Page Application
Обмен данных должен осуществляться путем отправки/принятия http запросов
 с данными в формате JSON
Обновление данных на клиенте не должно приводить к перегрузке страницы
Серверный REST API должен поддерживать ожидаемую семантику:
 правильно использовать http методы
  (GET для чтения данных, POST/PUT для изменения, DELETE для удаления и т.п.)
 возвращать правильные коды ответов
  (200 в случае успешного чтения/изменения данных, 404 если ресурс не найдет и т.п.)
Обязательно использование NodeJS на сервере
На клиенте можно использовать что угодно, React/Angular/Vue или вообще без библиотеки

Добавить к приложению аутентификацию на базе JWT токенов
Токен должен передаваться через httponly cookie на клиент и так же отправляться на сервер
При попытке прочитать/изменить данные на сервере без валидного токена,
 клиенту должен возвращаться 401 код
При получении кода 401 клиент должен потребовать от пользователя ввода логина/пароля
Для формирования jwt токена можно использовать только пакеты jsonwebtoken и bcrypt
Логику аутентификации нужно описать в виде отдельного middleware той библиотеки,
 на которой написан сервер (например, Express)

Заменить REST API на обмен данных через Web Sockets
Можно использовать библиотеку SockeIO

На сервере сделать API на GraphQL

Сделать точно такой же курсач